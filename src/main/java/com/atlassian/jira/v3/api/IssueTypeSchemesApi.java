/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.api;

import com.atlassian.jira.v3.model.*;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.*;
import java.util.Set;

/**
 * The Jira Cloud platform REST API
 *
 * <p>Jira Cloud platform REST API documentation
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/rest/api/3/issuetypescheme")
public interface IssueTypeSchemesApi {

	/**
	 * Add issue types to issue type scheme
	 *
	 * Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{issueTypeSchemeId}/issuetype")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Object addIssueTypesToIssueTypeScheme(@PathParam("issueTypeSchemeId") Long issueTypeSchemeId, IssueTypeIds issueTypeIds) throws ApiException, ProcessingException;

	/**
	 * Assign issue type scheme to project
	 *
	 * Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/project")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Object assignIssueTypeSchemeToProject(IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation) throws ApiException, ProcessingException;

	/**
	 * Create issue type scheme
	 *
	 * Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@POST

	@Consumes({"application/json"})
	@Produces({"application/json"})
	IssueTypeSchemeID createIssueTypeScheme(IssueTypeSchemeDetails issueTypeSchemeDetails) throws ApiException, ProcessingException;

	/**
	 * Delete issue type scheme
	 *
	 * Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@DELETE
	@Path("/{issueTypeSchemeId}")
	@Produces({"application/json"})
	Object deleteIssueTypeScheme(@PathParam("issueTypeSchemeId") Long issueTypeSchemeId) throws ApiException, ProcessingException;

	/**
	 * Get all issue type schemes
	 *
	 * Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET

	@Produces({"application/json"})
	PageBeanIssueTypeScheme getAllIssueTypeSchemes(@QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults, @QueryParam("id") Set<Long> id, @QueryParam("orderBy") @DefaultValue("id") String orderBy, @QueryParam("expand") @DefaultValue("") String expand, @QueryParam("queryString") @DefaultValue("") String queryString) throws ApiException, ProcessingException;

	/**
	 * Get issue type schemes for projects
	 *
	 * Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/project")
	@Produces({"application/json"})
	PageBeanIssueTypeSchemeProjects getIssueTypeSchemeForProjects(@QueryParam("projectId") Set<Long> projectId, @QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults) throws ApiException, ProcessingException;

	/**
	 * Get issue type scheme items
	 *
	 * Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/mapping")
	@Produces({"application/json"})
	PageBeanIssueTypeSchemeMapping getIssueTypeSchemesMapping(@QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults, @QueryParam("issueTypeSchemeId") Set<Long> issueTypeSchemeId) throws ApiException, ProcessingException;

	/**
	 * Remove issue type from issue type scheme
	 *
	 * Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@DELETE
	@Path("/{issueTypeSchemeId}/issuetype/{issueTypeId}")
	@Produces({"application/json"})
	Object removeIssueTypeFromIssueTypeScheme(@PathParam("issueTypeSchemeId") Long issueTypeSchemeId, @PathParam("issueTypeId") Long issueTypeId) throws ApiException, ProcessingException;

	/**
	 * Change order of issue types
	 *
	 * Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either &#x60;after&#x60; or &#x60;position&#x60; must be provided.  *  the issue type in &#x60;after&#x60; must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{issueTypeSchemeId}/issuetype/move")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Object reorderIssueTypesInIssueTypeScheme(@PathParam("issueTypeSchemeId") Long issueTypeSchemeId, OrderOfIssueTypes orderOfIssueTypes) throws ApiException, ProcessingException;

	/**
	 * Update issue type scheme
	 *
	 * Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{issueTypeSchemeId}")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Object updateIssueTypeScheme(@PathParam("issueTypeSchemeId") Long issueTypeSchemeId, IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails) throws ApiException, ProcessingException;
}
