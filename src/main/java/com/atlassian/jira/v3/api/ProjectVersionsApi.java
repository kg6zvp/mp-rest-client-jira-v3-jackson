/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.api;

import com.atlassian.jira.v3.model.*;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.*;
import java.util.List;

/**
 * The Jira Cloud platform REST API
 *
 * <p>Jira Cloud platform REST API documentation
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/rest/api/3")
public interface ProjectVersionsApi {

	/**
	 * Create related work
	 *
	 * Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
	 *
	 */
	@POST
	@Path("/version/{id}/relatedwork")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	VersionRelatedWork createRelatedWork(@PathParam("id") String id, VersionRelatedWork versionRelatedWork) throws ApiException, ProcessingException;

	/**
	 * Create version
	 *
	 * Creates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
	 *
	 */
	@POST
	@Path("/version")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Version createVersion(Version version) throws ApiException, ProcessingException;

	/**
	 * Delete and replace version
	 *
	 * Deletes a project version.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, or any version picker custom fields. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
	 *
	 */
	@POST
	@Path("/version/{id}/removeAndSwap")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Object deleteAndReplaceVersion(@PathParam("id") String id, DeleteAndReplaceVersionBean deleteAndReplaceVersionBean) throws ApiException, ProcessingException;

	/**
	 * Delete related work
	 *
	 * Deletes the given related work for the given version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
	 *
	 */
	@DELETE
	@Path("/version/{versionId}/relatedwork/{relatedWorkId}")
	void deleteRelatedWork(@PathParam("versionId") String versionId, @PathParam("relatedWorkId") String relatedWorkId) throws ApiException, ProcessingException;

	/**
	 * Delete version
	 *
	 * Deletes a project version.  Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; provided in this resource.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60; or &#x60;affectedVersion&#x60;. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; that contain the deleted version are cleared.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
	 *
	 * @deprecated
	 */
	@Deprecated
	@DELETE
	@Path("/version/{id}")
	void deleteVersion(@PathParam("id") String id, @QueryParam("moveFixIssuesTo") String moveFixIssuesTo, @QueryParam("moveAffectedIssuesTo") String moveAffectedIssuesTo) throws ApiException, ProcessingException;

	/**
	 * Get project versions
	 *
	 * Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
	 *
	 */
	@GET
	@Path("/project/{projectIdOrKey}/versions")
	@Produces({"application/json"})
	List<Version> getProjectVersions(@PathParam("projectIdOrKey") String projectIdOrKey, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Get project versions paginated
	 *
	 * Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
	 *
	 */
	@GET
	@Path("/project/{projectIdOrKey}/version")
	@Produces({"application/json"})
	PageBeanVersion getProjectVersionsPaginated(@PathParam("projectIdOrKey") String projectIdOrKey, @QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults, @QueryParam("orderBy") String orderBy, @QueryParam("query") String query, @QueryParam("status") String status, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Get related work
	 *
	 * Returns related work items for the given version id.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
	 *
	 */
	@GET
	@Path("/version/{id}/relatedwork")
	@Produces({"application/json"})
	List<VersionRelatedWork> getRelatedWork(@PathParam("id") String id) throws ApiException, ProcessingException;

	/**
	 * Get version
	 *
	 * Returns a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
	 *
	 */
	@GET
	@Path("/version/{id}")
	@Produces({"application/json"})
	Version getVersion(@PathParam("id") String id, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Get version&#39;s related issues count
	 *
	 * Returns the following counts for a version:   *  Number of issues where the &#x60;fixVersion&#x60; is set to the version.  *  Number of issues where the &#x60;affectedVersion&#x60; is set to the version.  *  Number of issues where a version custom field is set to the version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
	 *
	 */
	@GET
	@Path("/version/{id}/relatedIssueCounts")
	@Produces({"application/json"})
	VersionIssueCounts getVersionRelatedIssues(@PathParam("id") String id) throws ApiException, ProcessingException;

	/**
	 * Get version&#39;s unresolved issues count
	 *
	 * Returns counts of the issues and unresolved issues for the project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
	 *
	 */
	@GET
	@Path("/version/{id}/unresolvedIssueCount")
	@Produces({"application/json"})
	VersionUnresolvedIssuesCount getVersionUnresolvedIssues(@PathParam("id") String id) throws ApiException, ProcessingException;

	/**
	 * Merge versions
	 *
	 * Merges two project versions. The merge is completed by deleting the version specified in &#x60;id&#x60; and replacing any occurrences of its ID in &#x60;fixVersion&#x60; with the version ID specified in &#x60;moveIssuesTo&#x60;.  Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and custom fields.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
	 *
	 */
	@PUT
	@Path("/version/{id}/mergeto/{moveIssuesTo}")
	@Produces({"application/json"})
	Object mergeVersions(@PathParam("id") String id, @PathParam("moveIssuesTo") String moveIssuesTo) throws ApiException, ProcessingException;

	/**
	 * Move version
	 *
	 * Modifies the version&#39;s sequence within the project, which affects the display order of the versions in Jira.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
	 *
	 */
	@POST
	@Path("/version/{id}/move")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Version moveVersion(@PathParam("id") String id, VersionMoveBean versionMoveBean) throws ApiException, ProcessingException;

	/**
	 * Update related work
	 *
	 * Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can&#39;t be edited.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
	 *
	 */
	@PUT
	@Path("/version/{id}/relatedwork")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	VersionRelatedWork updateRelatedWork(@PathParam("id") String id, VersionRelatedWork versionRelatedWork) throws ApiException, ProcessingException;

	/**
	 * Update version
	 *
	 * Updates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
	 *
	 */
	@PUT
	@Path("/version/{id}")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Version updateVersion(@PathParam("id") String id, Version version) throws ApiException, ProcessingException;
}
