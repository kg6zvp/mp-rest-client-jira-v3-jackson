/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.api;

import com.atlassian.jira.v3.model.*;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.*;
import java.util.List;

/**
 * The Jira Cloud platform REST API
 *
 * <p>Jira Cloud platform REST API documentation
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/rest/api/3/workflowscheme")
public interface WorkflowSchemesApi {

	/**
	 * Create workflow scheme
	 *
	 * Creates a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@POST

	@Consumes({"application/json"})
	@Produces({"application/json"})
	WorkflowScheme createWorkflowScheme(WorkflowScheme workflowScheme) throws ApiException, ProcessingException;

	/**
	 * Delete default workflow
	 *
	 * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira&#39;s system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@DELETE
	@Path("/{id}/default")
	@Produces({"application/json"})
	WorkflowScheme deleteDefaultWorkflow(@PathParam("id") Long id, @QueryParam("updateDraftIfNeeded") Boolean updateDraftIfNeeded) throws ApiException, ProcessingException;

	/**
	 * Delete issue types for workflow in workflow scheme
	 *
	 * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@DELETE
	@Path("/{id}/workflow")
	void deleteWorkflowMapping(@PathParam("id") Long id, @QueryParam("workflowName") String workflowName, @QueryParam("updateDraftIfNeeded") @DefaultValue("false") Boolean updateDraftIfNeeded) throws ApiException, ProcessingException;

	/**
	 * Delete workflow scheme
	 *
	 * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@DELETE
	@Path("/{id}")
	@Produces({"application/json"})
	Object deleteWorkflowScheme(@PathParam("id") Long id) throws ApiException, ProcessingException;

	/**
	 * Delete workflow for issue type in workflow scheme
	 *
	 * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@DELETE
	@Path("/{id}/issuetype/{issueType}")
	@Produces({"application/json"})
	WorkflowScheme deleteWorkflowSchemeIssueType(@PathParam("id") Long id, @PathParam("issueType") String issueType, @QueryParam("updateDraftIfNeeded") @DefaultValue("false") Boolean updateDraftIfNeeded) throws ApiException, ProcessingException;

	/**
	 * Get all workflow schemes
	 *
	 * Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET

	@Produces({"application/json"})
	PageBeanWorkflowScheme getAllWorkflowSchemes(@QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults) throws ApiException, ProcessingException;

	/**
	 * Get default workflow
	 *
	 * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/{id}/default")
	@Produces({"application/json"})
	DefaultWorkflow getDefaultWorkflow(@PathParam("id") Long id, @QueryParam("returnDraftIfExists") @DefaultValue("false") Boolean returnDraftIfExists) throws ApiException, ProcessingException;

	/**
	 * Get issue types for workflows in workflow scheme
	 *
	 * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/{id}/workflow")
	@Produces({"application/json"})
	IssueTypesWorkflowMapping getWorkflow(@PathParam("id") Long id, @QueryParam("workflowName") String workflowName, @QueryParam("returnDraftIfExists") @DefaultValue("false") Boolean returnDraftIfExists) throws ApiException, ProcessingException;

	/**
	 * Get workflow scheme
	 *
	 * Returns a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/{id}")
	@Produces({"application/json"})
	WorkflowScheme getWorkflowScheme(@PathParam("id") Long id, @QueryParam("returnDraftIfExists") @DefaultValue("false") Boolean returnDraftIfExists) throws ApiException, ProcessingException;

	/**
	 * Get workflow for issue type in workflow scheme
	 *
	 * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/{id}/issuetype/{issueType}")
	@Produces({"application/json"})
	IssueTypeWorkflowMapping getWorkflowSchemeIssueType(@PathParam("id") Long id, @PathParam("issueType") String issueType, @QueryParam("returnDraftIfExists") @DefaultValue("false") Boolean returnDraftIfExists) throws ApiException, ProcessingException;

	/**
	 * Bulk get workflow schemes
	 *
	 * Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.  **[Permissions](#permissions) required:**   *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes  *  *Administer projects* project permissions to access project-scoped workflow schemes
	 *
	 */
	@POST
	@Path("/read")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	List<WorkflowSchemeReadResponse> readWorkflowSchemes(WorkflowSchemeReadRequest workflowSchemeReadRequest, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Set workflow for issue type in workflow scheme
	 *
	 * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{id}/issuetype/{issueType}")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	WorkflowScheme setWorkflowSchemeIssueType(@PathParam("id") Long id, @PathParam("issueType") String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping) throws ApiException, ProcessingException;

	/**
	 * Update default workflow
	 *
	 * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{id}/default")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	WorkflowScheme updateDefaultWorkflow(@PathParam("id") Long id, DefaultWorkflow defaultWorkflow) throws ApiException, ProcessingException;

	/**
	 * Update workflow scheme
	 * <p>
	 * Updates company-managed and team-managed project workflow schemes. This API doesn&#39;t have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.  **[Permissions](#permissions) required:**   *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.  *  *Administer projects* project permission to update project-scoped workflow schemes.
	 *
	 */
	@POST
	@Path("/update")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Object updateSchemes(WorkflowSchemeUpdateRequest workflowSchemeUpdateRequest) throws ApiException, ProcessingException;

	/**
	 * Set issue types for workflow in workflow scheme
	 *
	 * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{id}/workflow")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	WorkflowScheme updateWorkflowMapping(@PathParam("id") Long id, @QueryParam("workflowName") String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping) throws ApiException, ProcessingException;

	/**
	 * Classic update workflow scheme
	 *
	 * Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that &#x60;updateDraftIfNeeded&#x60; is set to &#x60;true&#x60;.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{id}")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	WorkflowScheme updateWorkflowScheme(@PathParam("id") Long id, WorkflowScheme workflowScheme) throws ApiException, ProcessingException;

	/**
	 * Get required status mappings for workflow scheme update
	 * <p>
	 * Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.  **[Permissions](#permissions) required:**   *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.  *  *Administer projects* project permission to update project-scoped workflow schemes.
	 *
	 */
	@POST
	@Path("/update/mappings")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	WorkflowSchemeUpdateRequiredMappingsResponse updateWorkflowSchemeMappings(WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest) throws ApiException, ProcessingException;
}
