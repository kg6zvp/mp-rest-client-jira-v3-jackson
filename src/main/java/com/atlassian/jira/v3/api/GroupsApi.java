/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.api;

import com.atlassian.jira.v3.model.*;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.*;
import java.util.List;
import java.util.Set;

/**
 * The Jira Cloud platform REST API
 *
 * <p>Jira Cloud platform REST API documentation
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/rest/api/3")
public interface GroupsApi {

	/**
	 * Add user to group
	 *
	 * Adds a user to a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
	 *
	 */
	@POST
	@Path("/group/user")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Group addUserToGroup(UpdateUserToGroupBean updateUserToGroupBean, @QueryParam("groupname") String groupname, @QueryParam("groupId") String groupId) throws ApiException, ProcessingException;

	/**
	 * Bulk get groups
	 *
	 * Returns a [paginated](#pagination) list of groups.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/group/bulk")
	@Produces({"application/json"})
	PageBeanGroupDetails bulkGetGroups(@QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults, @QueryParam("groupId") Set<String> groupId, @QueryParam("groupName") Set<String> groupName, @QueryParam("accessType") String accessType, @QueryParam("applicationKey") String applicationKey) throws ApiException, ProcessingException;

	/**
	 * Create group
	 *
	 * Creates a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
	 *
	 */
	@POST
	@Path("/group")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Group createGroup(AddGroupBean addGroupBean) throws ApiException, ProcessingException;

	/**
	 * Find groups
	 *
	 * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.  The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the &#x60;html&#x60; field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.  The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
	 *
	 */
	@GET
	@Path("/groups/picker")
	@Produces({"application/json"})
	FoundGroups findGroups(@QueryParam("accountId") String accountId, @QueryParam("query") String query, @QueryParam("exclude") List<String> exclude, @QueryParam("excludeId") List<String> excludeId, @QueryParam("maxResults") Integer maxResults, @QueryParam("caseInsensitive") @DefaultValue("false") Boolean caseInsensitive, @QueryParam("userName") String userName) throws ApiException, ProcessingException;

	/**
	 * Get group
	 *
	 * This operation is deprecated, use [&#x60;group/member&#x60;](#api-rest-api-3-group-member-get).  Returns all users in a group.  **[Permissions](#permissions) required:** either of:   *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 * @deprecated
	 */
	@Deprecated
	@GET
	@Path("/group")
	@Produces({"application/json"})
	Group getGroup(@QueryParam("groupname") String groupname, @QueryParam("groupId") String groupId, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Get users from group
	 *
	 * Returns a [paginated](#pagination) list of all users in a group.  Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.  **[Permissions](#permissions) required:** either of:   *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@GET
	@Path("/group/member")
	@Produces({"application/json"})
	PageBeanUserDetails getUsersFromGroup(@QueryParam("groupname") String groupname, @QueryParam("groupId") String groupId, @QueryParam("includeInactiveUsers") @DefaultValue("false") Boolean includeInactiveUsers, @QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults) throws ApiException, ProcessingException;

	/**
	 * Remove group
	 *
	 * Deletes a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
	 *
	 */
	@DELETE
	@Path("/group")
	void removeGroup(@QueryParam("groupname") String groupname, @QueryParam("groupId") String groupId, @QueryParam("swapGroup") String swapGroup, @QueryParam("swapGroupId") String swapGroupId) throws ApiException, ProcessingException;

	/**
	 * Remove user from group
	 *
	 * Removes a user from a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
	 *
	 */
	@DELETE
	@Path("/group/user")
	void removeUserFromGroup(@QueryParam("accountId") String accountId, @QueryParam("groupname") String groupname, @QueryParam("groupId") String groupId, @QueryParam("username") String username) throws ApiException, ProcessingException;
}
