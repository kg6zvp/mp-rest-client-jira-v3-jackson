/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.api;

import com.atlassian.jira.v3.model.*;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.*;
import java.util.List;
import java.util.Set;

/**
 * The Jira Cloud platform REST API
 *
 * <p>Jira Cloud platform REST API documentation
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/rest/api/3/filter")
public interface FiltersApi {

	/**
	 * Change filter owner
	 *
	 * Changes the owner of the filter.  **[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@PUT
	@Path("/{id}/owner")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Object changeFilterOwner(@PathParam("id") Long id, ChangeFilterOwner changeFilterOwner) throws ApiException, ProcessingException;

	/**
	 * Create filter
	 *
	 * Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.  **[Permissions](#permissions) required:** Permission to access Jira.
	 *
	 */
	@POST

	@Consumes({"application/json"})
	@Produces({"application/json"})
	Filter createFilter(Filter filter, @QueryParam("expand") String expand, @QueryParam("overrideSharePermissions") @DefaultValue("false") Boolean overrideSharePermissions) throws ApiException, ProcessingException;

	/**
	 * Remove filter as favorite
	 *
	 * Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user&#39;s favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.  **[Permissions](#permissions) required:** Permission to access Jira.
	 *
	 */
	@DELETE
	@Path("/{id}/favourite")
	@Produces({"application/json"})
	Filter deleteFavouriteForFilter(@PathParam("id") Long id, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Delete filter
	 *
	 * Delete a filter.  **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
	 *
	 */
	@DELETE
	@Path("/{id}")
	void deleteFilter(@PathParam("id") Long id) throws ApiException, ProcessingException;

	/**
	 * Get columns
	 *
	 * Returns the columns configured for a filter. The column configuration is used when the filter&#39;s results are viewed in *List View* with the *Columns* set to *Filter*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, column details are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
	 *
	 */
	@GET
	@Path("/{id}/columns")
	@Produces({"application/json"})
	List<ColumnItem> getColumns(@PathParam("id") Long id) throws ApiException, ProcessingException;

	/**
	 * Get favorite filters
	 *
	 * Returns the visible favorite filters of the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
	 *
	 */
	@GET
	@Path("/favourite")
	@Produces({"application/json"})
	List<Filter> getFavouriteFilters(@QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Get filter
	 *
	 * Returns a filter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.
	 *
	 */
	@GET
	@Path("/{id}")
	@Produces({"application/json"})
	Filter getFilter(@PathParam("id") Long id, @QueryParam("expand") String expand, @QueryParam("overrideSharePermissions") @DefaultValue("false") Boolean overrideSharePermissions) throws ApiException, ProcessingException;

	/**
	 * Search for filters
	 *
	 * Returns a [paginated](#pagination) list of filters. Use this operation to get:   *  specific filters, by defining &#x60;id&#x60; only.  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
	 *
	 */
	@GET
	@Path("/search")
	@Produces({"application/json"})
	PageBeanFilterDetails getFiltersPaginated(@QueryParam("filterName") String filterName, @QueryParam("accountId") String accountId, @QueryParam("owner") String owner, @QueryParam("groupname") String groupname, @QueryParam("groupId") String groupId, @QueryParam("projectId") Long projectId, @QueryParam("id") Set<Long> id, @QueryParam("orderBy") @DefaultValue("name") String orderBy, @QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("50") Integer maxResults, @QueryParam("expand") String expand, @QueryParam("overrideSharePermissions") @DefaultValue("false") Boolean overrideSharePermissions) throws ApiException, ProcessingException;

	/**
	 * Get my filters
	 *
	 * Returns the filters owned by the user. If &#x60;includeFavourites&#x60; is &#x60;true&#x60;, the user&#39;s visible favorite filters are also returned.  **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
	 *
	 */
	@GET
	@Path("/my")
	@Produces({"application/json"})
	List<Filter> getMyFilters(@QueryParam("expand") String expand, @QueryParam("includeFavourites") @DefaultValue("false") Boolean includeFavourites) throws ApiException, ProcessingException;

	/**
	 * Reset columns
	 *
	 * Reset the user&#39;s column configuration for the filter to the default.  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
	 *
	 */
	@DELETE
	@Path("/{id}/columns")
	void resetColumns(@PathParam("id") Long id) throws ApiException, ProcessingException;

	/**
	 * Set columns
	 *
	 * Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has &#x60;navigable&#x60; set to &#x60;true&#x60;.  The parameters for this resource are expressed as HTML form data. For example, in curl:  &#x60;curl -X PUT -d columns&#x3D;summary -d columns&#x3D;description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns&#x60;  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
	 *
	 */
	@PUT
	@Path("/{id}/columns")
	@Consumes({"application/json", "multipart/form-data"})
	@Produces({"application/json"})
	Object setColumns(@PathParam("id") Long id, ColumnRequestBody columnRequestBody) throws ApiException, ProcessingException;

	/**
	 * Add filter as favorite
	 *
	 * Add a filter as a favorite for the user.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
	 *
	 */
	@PUT
	@Path("/{id}/favourite")
	@Produces({"application/json"})
	Filter setFavouriteForFilter(@PathParam("id") Long id, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Update filter
	 *
	 * Updates a filter. Use this operation to update a filter&#39;s name, description, JQL, or sharing.  **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
	 *
	 */
	@PUT
	@Path("/{id}")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Filter updateFilter(@PathParam("id") Long id, Filter filter, @QueryParam("expand") String expand, @QueryParam("overrideSharePermissions") @DefaultValue("false") Boolean overrideSharePermissions) throws ApiException, ProcessingException;
}
