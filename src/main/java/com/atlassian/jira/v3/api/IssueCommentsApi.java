/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.api;

import com.atlassian.jira.v3.model.Comment;
import com.atlassian.jira.v3.model.IssueCommentListRequestBean;
import com.atlassian.jira.v3.model.PageBeanComment;
import com.atlassian.jira.v3.model.PageOfComments;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import javax.ws.rs.*;

/**
 * The Jira Cloud platform REST API
 *
 * <p>Jira Cloud platform REST API documentation
 *
 */

@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/rest/api/3")
public interface IssueCommentsApi {

	/**
	 * Add comment
	 *
	 * Adds a comment to an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
	 *
	 */
	@POST
	@Path("/issue/{issueIdOrKey}/comment")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Comment addComment(@PathParam("issueIdOrKey") String issueIdOrKey, Comment comment, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Delete comment
	 *
	 * Deletes a comment.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
	 *
	 */
	@DELETE
	@Path("/issue/{issueIdOrKey}/comment/{id}")
	void deleteComment(@PathParam("issueIdOrKey") String issueIdOrKey, @PathParam("id") String id) throws ApiException, ProcessingException;

	/**
	 * Get comment
	 *
	 * Returns a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
	 *
	 */
	@GET
	@Path("/issue/{issueIdOrKey}/comment/{id}")
	@Produces({"application/json"})
	Comment getComment(@PathParam("issueIdOrKey") String issueIdOrKey, @PathParam("id") String id, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Get comments
	 *
	 * Returns all comments for an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
	 *
	 */
	@GET
	@Path("/issue/{issueIdOrKey}/comment")
	@Produces({"application/json"})
	PageOfComments getComments(@PathParam("issueIdOrKey") String issueIdOrKey, @QueryParam("startAt") @DefaultValue("0") Long startAt, @QueryParam("maxResults") @DefaultValue("5000") Integer maxResults, @QueryParam("orderBy") String orderBy, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Get comments by IDs
	 *
	 * Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are returned where the user:   *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
	 *
	 */
	@POST
	@Path("/comment/list")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	PageBeanComment getCommentsByIds(IssueCommentListRequestBean issueCommentListRequestBean, @QueryParam("expand") String expand) throws ApiException, ProcessingException;

	/**
	 * Update comment
	 *
	 * Updates a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
	 *
	 */
	@PUT
	@Path("/issue/{issueIdOrKey}/comment/{id}")
	@Consumes({"application/json"})
	@Produces({"application/json"})
	Comment updateComment(@PathParam("issueIdOrKey") String issueIdOrKey, @PathParam("id") String id, Comment comment, @QueryParam("notifyUsers") @DefaultValue("true") Boolean notifyUsers, @QueryParam("overrideEditableFlag") @DefaultValue("false") Boolean overrideEditableFlag, @QueryParam("expand") String expand) throws ApiException, ProcessingException;
}
