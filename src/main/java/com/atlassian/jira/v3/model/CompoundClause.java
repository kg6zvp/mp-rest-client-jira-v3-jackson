/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;

/**
 * A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, \"A OR B AND C\" is parsed as \"(A OR B) AND C\". See Setting the precedence of operators for more information about precedence in JQL queries.`
 **/

public class CompoundClause {

	/**
	 * The list of nested clauses.
	 **/

	private List<JqlQueryClause> clauses = new ArrayList<>();
	/**
	 * The operator between the clauses.
	 **/

	private OperatorEnum operator;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The list of nested clauses.
	 * @return clauses
	 **/
	public List<JqlQueryClause> getClauses() {
		return clauses;
	}

	/**
	 * Set clauses
	 **/
	public void setClauses(List<JqlQueryClause> clauses) {
		this.clauses = clauses;
	}

	public CompoundClause clauses(List<JqlQueryClause> clauses) {
		this.clauses = clauses;
		return this;
	}

	public CompoundClause addClausesItem(JqlQueryClause clausesItem) {
		if (this.clauses == null) {
			this.clauses = new ArrayList<>();
		}
		this.clauses.add(clausesItem);
		return this;
	}

	/**
	 * The operator between the clauses.
	 * @return operator
	 **/
	public OperatorEnum getOperator() {
		return operator;
	}

	/**
	 * Set operator
	 **/
	public void setOperator(OperatorEnum operator) {
		this.operator = operator;
	}

	public CompoundClause operator(OperatorEnum operator) {
		this.operator = operator;
		return this;
	}


	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class CompoundClause {\n" +
			"    clauses: " + toIndentedString(clauses) + "\n" +
			"    operator: " + toIndentedString(operator) + "\n" +
			"}";
		return sb;
	}

	public enum OperatorEnum {

		AND("and"), OR("or"), NOT("not");


		String value;

		OperatorEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
