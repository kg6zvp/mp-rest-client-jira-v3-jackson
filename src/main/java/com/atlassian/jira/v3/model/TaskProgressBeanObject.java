/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;

import java.net.URI;

/**
 * Details about a task.
 **/

public class TaskProgressBeanObject {

	/**
	 * The description of the task.
	 **/

	private String description;

	/**
	 * The execution time of the task, in milliseconds.
	 **/

	private Long elapsedRuntime;

	/**
	 * A timestamp recording when the task was finished.
	 **/

	private Long finished;

	/**
	 * The ID of the task.
	 **/

	private String id;

	/**
	 * A timestamp recording when the task progress was last updated.
	 **/

	private Long lastUpdate;

	/**
	 * Information about the progress of the task.
	 **/

	private String message;

	/**
	 * The progress of the task, as a percentage complete.
	 **/

	private Long progress;

	/**
	 * The result of the task execution.
	 **/

	private Object result = null;

	/**
	 * The URL of the task.
	 **/

	private URI self;

	/**
	 * A timestamp recording when the task was started.
	 **/

	private Long started;
	/**
	 * The status of the task.
	 **/

	private StatusEnum status;
	/**
	 * A timestamp recording when the task was submitted.
	 **/

	private Long submitted;
	/**
	 * The ID of the user who submitted the task.
	 **/

	private Long submittedBy;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The description of the task.
	 * @return description
	 **/
	public String getDescription() {
		return description;
	}

	/**
	 * Set description
	 **/
	public void setDescription(String description) {
		this.description = description;
	}

	public TaskProgressBeanObject description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * The execution time of the task, in milliseconds.
	 * @return elapsedRuntime
	 **/
	public Long getElapsedRuntime() {
		return elapsedRuntime;
	}

	/**
	 * Set elapsedRuntime
	 **/
	public void setElapsedRuntime(Long elapsedRuntime) {
		this.elapsedRuntime = elapsedRuntime;
	}

	public TaskProgressBeanObject elapsedRuntime(Long elapsedRuntime) {
		this.elapsedRuntime = elapsedRuntime;
		return this;
	}

	/**
	 * A timestamp recording when the task was finished.
	 * @return finished
	 **/
	public Long getFinished() {
		return finished;
	}

	/**
	 * Set finished
	 **/
	public void setFinished(Long finished) {
		this.finished = finished;
	}

	public TaskProgressBeanObject finished(Long finished) {
		this.finished = finished;
		return this;
	}

	/**
	 * The ID of the task.
	 * @return id
	 **/
	public String getId() {
		return id;
	}

	/**
	 * Set id
	 **/
	public void setId(String id) {
		this.id = id;
	}

	public TaskProgressBeanObject id(String id) {
		this.id = id;
		return this;
	}

	/**
	 * A timestamp recording when the task progress was last updated.
	 * @return lastUpdate
	 **/
	public Long getLastUpdate() {
		return lastUpdate;
	}

	/**
	 * Set lastUpdate
	 **/
	public void setLastUpdate(Long lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	public TaskProgressBeanObject lastUpdate(Long lastUpdate) {
		this.lastUpdate = lastUpdate;
		return this;
	}

	/**
	 * Information about the progress of the task.
	 * @return message
	 **/
	public String getMessage() {
		return message;
	}

	/**
	 * Set message
	 **/
	public void setMessage(String message) {
		this.message = message;
	}

	public TaskProgressBeanObject message(String message) {
		this.message = message;
		return this;
	}

	/**
	 * The progress of the task, as a percentage complete.
	 * @return progress
	 **/
	public Long getProgress() {
		return progress;
	}

	/**
	 * Set progress
	 **/
	public void setProgress(Long progress) {
		this.progress = progress;
	}

	public TaskProgressBeanObject progress(Long progress) {
		this.progress = progress;
		return this;
	}

	/**
	 * The result of the task execution.
	 * @return result
	 **/
	public Object getResult() {
		return result;
	}

	/**
	 * Set result
	 **/
	public void setResult(Object result) {
		this.result = result;
	}

	public TaskProgressBeanObject result(Object result) {
		this.result = result;
		return this;
	}

	/**
	 * The URL of the task.
	 * @return self
	 **/
	public URI getSelf() {
		return self;
	}

	/**
	 * Set self
	 **/
	public void setSelf(URI self) {
		this.self = self;
	}

	public TaskProgressBeanObject self(URI self) {
		this.self = self;
		return this;
	}

	/**
	 * A timestamp recording when the task was started.
	 * @return started
	 **/
	public Long getStarted() {
		return started;
	}

	/**
	 * Set started
	 **/
	public void setStarted(Long started) {
		this.started = started;
	}

	public TaskProgressBeanObject started(Long started) {
		this.started = started;
		return this;
	}

	/**
	 * The status of the task.
	 * @return status
	 **/
	public StatusEnum getStatus() {
		return status;
	}

	/**
	 * Set status
	 **/
	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	public TaskProgressBeanObject status(StatusEnum status) {
		this.status = status;
		return this;
	}

	/**
	 * A timestamp recording when the task was submitted.
	 * @return submitted
	 **/
	public Long getSubmitted() {
		return submitted;
	}

	/**
	 * Set submitted
	 **/
	public void setSubmitted(Long submitted) {
		this.submitted = submitted;
	}

	public TaskProgressBeanObject submitted(Long submitted) {
		this.submitted = submitted;
		return this;
	}

	/**
	 * The ID of the user who submitted the task.
	 * @return submittedBy
	 **/
	public Long getSubmittedBy() {
		return submittedBy;
	}

	/**
	 * Set submittedBy
	 **/
	public void setSubmittedBy(Long submittedBy) {
		this.submittedBy = submittedBy;
	}

	public TaskProgressBeanObject submittedBy(Long submittedBy) {
		this.submittedBy = submittedBy;
		return this;
	}


	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class TaskProgressBeanObject {\n" +
			"    description: " + toIndentedString(description) + "\n" +
			"    elapsedRuntime: " + toIndentedString(elapsedRuntime) + "\n" +
			"    finished: " + toIndentedString(finished) + "\n" +
			"    id: " + toIndentedString(id) + "\n" +
			"    lastUpdate: " + toIndentedString(lastUpdate) + "\n" +
			"    message: " + toIndentedString(message) + "\n" +
			"    progress: " + toIndentedString(progress) + "\n" +
			"    result: " + toIndentedString(result) + "\n" +
			"    self: " + toIndentedString(self) + "\n" +
			"    started: " + toIndentedString(started) + "\n" +
			"    status: " + toIndentedString(status) + "\n" +
			"    submitted: " + toIndentedString(submitted) + "\n" +
			"    submittedBy: " + toIndentedString(submittedBy) + "\n" +
			"}";
		return sb;
	}

	public enum StatusEnum {

		ENQUEUED("ENQUEUED"), RUNNING("RUNNING"), COMPLETE("COMPLETE"), FAILED("FAILED"), CANCEL_REQUESTED("CANCEL_REQUESTED"), CANCELLED("CANCELLED"), DEAD("DEAD");


		String value;

		StatusEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
