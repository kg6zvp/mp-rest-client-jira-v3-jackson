/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

import java.net.URI;
import java.util.Date;
import java.util.List;

/**
 * Details about a project version.
 **/
@NoArgsConstructor
@AllArgsConstructor
public class Version {

	/**
	 * If the expand option `approvers` is used, returns a list containing the approvers for this version.
	 **/
	private List<VersionApprover> approvers = null;

	/**
	 * Indicates that the version is archived. Optional when creating or updating a version.
	 **/
	private Boolean archived;

	/**
	 * The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
	 **/
	private String description;

	/**
	 * If the expand option `driver` is used, returns the Atlassian account ID of the driver.
	 **/
	private String driver;

	/**
	 * Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  `driver` Returns the Atlassian account ID of the version driver.  *  `approvers` Returns a list containing approvers for this version.  Optional for create and update.
	 **/
	private String expand;

	/**
	 * The ID of the version.
	 **/
	private String id;


	private VersionIssuesStatusForFixVersion issuesStatusForFixVersion;

	/**
	 * The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
	 **/

	private URI moveUnfixedIssuesTo;

	/**
	 * The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
	 **/

	private String name;

	/**
	 * If the expand option `operations` is used, returns the list of operations available for this version.
	 **/

	private List<SimpleLink> operations = null;

	/**
	 * Indicates that the version is overdue.
	 **/

	private Boolean overdue;

	/**
	 * Deprecated. Use `projectId`.
	 **/

	private String project;

	/**
	 * The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
	 **/

	private Long projectId;

	/**
	 * The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
	 **/

	private Date releaseDate;

	/**
	 * Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
	 **/

	private Boolean released;

	/**
	 * The URL of the version.
	 **/

	private URI self;

	/**
	 * The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
	 **/

	private Date startDate;

	/**
	 * The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
	 **/

	private String userReleaseDate;

	/**
	 * The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
	 **/

	private String userStartDate;

	/**
	 * If the expand option &#x60;approvers&#x60; is used, returns a list containing the approvers for this version.
	 * @return approvers
	 **/
	public List<VersionApprover> getApprovers() {
		return approvers;
	}


	/**
	 * Indicates that the version is archived. Optional when creating or updating a version.
	 * @return archived
	 **/
	public Boolean getArchived() {
		return archived;
	}

	/**
	 * Set archived
	 **/
	public void setArchived(Boolean archived) {
		this.archived = archived;
	}

	public Version archived(Boolean archived) {
		this.archived = archived;
		return this;
	}

	/**
	 * The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
	 * @return description
	 **/
	public String getDescription() {
		return description;
	}

	/**
	 * Set description
	 **/
	public void setDescription(String description) {
		this.description = description;
	}

	public Version description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * If the expand option &#x60;driver&#x60; is used, returns the Atlassian account ID of the driver.
	 * @return driver
	 **/
	public String getDriver() {
		return driver;
	}


	/**
	 * Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing approvers for this version.  Optional for create and update.
	 * @return expand
	 **/
	public String getExpand() {
		return expand;
	}

	/**
	 * Set expand
	 **/
	public void setExpand(String expand) {
		this.expand = expand;
	}

	public Version expand(String expand) {
		this.expand = expand;
		return this;
	}

	/**
	 * The ID of the version.
	 * @return id
	 **/
	public String getId() {
		return id;
	}


	/**
	 * Get issuesStatusForFixVersion
	 * @return issuesStatusForFixVersion
	 **/
	public VersionIssuesStatusForFixVersion getIssuesStatusForFixVersion() {
		return issuesStatusForFixVersion;
	}

	/**
	 * Set issuesStatusForFixVersion
	 **/
	public void setIssuesStatusForFixVersion(VersionIssuesStatusForFixVersion issuesStatusForFixVersion) {
		this.issuesStatusForFixVersion = issuesStatusForFixVersion;
	}

	public Version issuesStatusForFixVersion(VersionIssuesStatusForFixVersion issuesStatusForFixVersion) {
		this.issuesStatusForFixVersion = issuesStatusForFixVersion;
		return this;
	}

	/**
	 * The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
	 * @return moveUnfixedIssuesTo
	 **/
	public URI getMoveUnfixedIssuesTo() {
		return moveUnfixedIssuesTo;
	}

	/**
	 * Set moveUnfixedIssuesTo
	 **/
	public void setMoveUnfixedIssuesTo(URI moveUnfixedIssuesTo) {
		this.moveUnfixedIssuesTo = moveUnfixedIssuesTo;
	}

	public Version moveUnfixedIssuesTo(URI moveUnfixedIssuesTo) {
		this.moveUnfixedIssuesTo = moveUnfixedIssuesTo;
		return this;
	}

	/**
	 * The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
	 * @return name
	 **/
	public String getName() {
		return name;
	}

	/**
	 * Set name
	 **/
	public void setName(String name) {
		this.name = name;
	}

	public Version name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version.
	 * @return operations
	 **/
	public List<SimpleLink> getOperations() {
		return operations;
	}


	/**
	 * Indicates that the version is overdue.
	 * @return overdue
	 **/
	public Boolean getOverdue() {
		return overdue;
	}


	/**
	 * Deprecated. Use &#x60;projectId&#x60;.
	 * @return project
	 **/
	public String getProject() {
		return project;
	}

	/**
	 * Set project
	 **/
	public void setProject(String project) {
		this.project = project;
	}

	public Version project(String project) {
		this.project = project;
		return this;
	}

	/**
	 * The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
	 * @return projectId
	 **/
	public Long getProjectId() {
		return projectId;
	}

	/**
	 * Set projectId
	 **/
	public void setProjectId(Long projectId) {
		this.projectId = projectId;
	}

	public Version projectId(Long projectId) {
		this.projectId = projectId;
		return this;
	}

	/**
	 * The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
	 * @return releaseDate
	 **/
	public Date getReleaseDate() {
		return releaseDate;
	}

	/**
	 * Set releaseDate
	 **/
	public void setReleaseDate(Date releaseDate) {
		this.releaseDate = releaseDate;
	}

	public Version releaseDate(Date releaseDate) {
		this.releaseDate = releaseDate;
		return this;
	}

	/**
	 * Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
	 * @return released
	 **/
	public Boolean getReleased() {
		return released;
	}

	/**
	 * Set released
	 **/
	public void setReleased(Boolean released) {
		this.released = released;
	}

	public Version released(Boolean released) {
		this.released = released;
		return this;
	}

	/**
	 * The URL of the version.
	 * @return self
	 **/
	public URI getSelf() {
		return self;
	}


	/**
	 * The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
	 * @return startDate
	 **/
	public Date getStartDate() {
		return startDate;
	}

	/**
	 * Set startDate
	 **/
	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Version startDate(Date startDate) {
		this.startDate = startDate;
		return this;
	}

	/**
	 * The date on which work on this version is expected to finish, expressed in the instance&#39;s *Day/Month/Year Format* date format.
	 * @return userReleaseDate
	 **/
	public String getUserReleaseDate() {
		return userReleaseDate;
	}


	/**
	 * The date on which work on this version is expected to start, expressed in the instance&#39;s *Day/Month/Year Format* date format.
	 * @return userStartDate
	 **/
	public String getUserStartDate() {
		return userStartDate;
	}
}
