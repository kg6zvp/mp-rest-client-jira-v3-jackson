/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;

/**
 * A webhook.
 **/
@NoArgsConstructor
@AllArgsConstructor
public class Webhook {

	/**
	 * The Jira events that trigger the webhook.
	 **/

	private List<EventsEnum> events = new ArrayList<>();
	/**
	 * The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
	 **/

	private Long expirationDate;
	/**
	 * A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
	 **/

	private List<String> fieldIdsFilter = null;
	/**
	 * The ID of the webhook.
	 **/

	private Long id;
	/**
	 * A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
	 **/

	private List<String> issuePropertyKeysFilter = null;
	/**
	 * The JQL filter that specifies which issues the webhook is sent for.
	 **/

	private String jqlFilter;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The Jira events that trigger the webhook.
	 * @return events
	 **/
	public List<EventsEnum> getEvents() {
		return events;
	}

	/**
	 * Set events
	 **/
	public void setEvents(List<EventsEnum> events) {
		this.events = events;
	}

	public Webhook events(List<EventsEnum> events) {
		this.events = events;
		return this;
	}

	public Webhook addEventsItem(EventsEnum eventsItem) {
		if (this.events == null) {
			this.events = new ArrayList<>();
		}
		this.events.add(eventsItem);
		return this;
	}

	/**
	 * The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
	 * @return expirationDate
	 **/
	public Long getExpirationDate() {
		return expirationDate;
	}


	/**
	 * A list of field IDs. When the issue changelog contains any of the fields, the webhook &#x60;jira:issue_updated&#x60; is sent. If this parameter is not present, the app is notified about all field updates.
	 * @return fieldIdsFilter
	 **/
	public List<String> getFieldIdsFilter() {
		return fieldIdsFilter;
	}

	/**
	 * Set fieldIdsFilter
	 **/
	public void setFieldIdsFilter(List<String> fieldIdsFilter) {
		this.fieldIdsFilter = fieldIdsFilter;
	}

	public Webhook fieldIdsFilter(List<String> fieldIdsFilter) {
		this.fieldIdsFilter = fieldIdsFilter;
		return this;
	}

	public Webhook addFieldIdsFilterItem(String fieldIdsFilterItem) {
		if (this.fieldIdsFilter == null) {
			this.fieldIdsFilter = new ArrayList<>();
		}
		this.fieldIdsFilter.add(fieldIdsFilterItem);
		return this;
	}

	/**
	 * The ID of the webhook.
	 * @return id
	 **/
	public Long getId() {
		return id;
	}

	/**
	 * Set id
	 **/
	public void setId(Long id) {
		this.id = id;
	}

	public Webhook id(Long id) {
		this.id = id;
		return this;
	}

	/**
	 * A list of issue property keys. A change of those issue properties triggers the &#x60;issue_property_set&#x60; or &#x60;issue_property_deleted&#x60; webhooks. If this parameter is not present, the app is notified about all issue property updates.
	 * @return issuePropertyKeysFilter
	 **/
	public List<String> getIssuePropertyKeysFilter() {
		return issuePropertyKeysFilter;
	}

	/**
	 * Set issuePropertyKeysFilter
	 **/
	public void setIssuePropertyKeysFilter(List<String> issuePropertyKeysFilter) {
		this.issuePropertyKeysFilter = issuePropertyKeysFilter;
	}

	public Webhook issuePropertyKeysFilter(List<String> issuePropertyKeysFilter) {
		this.issuePropertyKeysFilter = issuePropertyKeysFilter;
		return this;
	}

	public Webhook addIssuePropertyKeysFilterItem(String issuePropertyKeysFilterItem) {
		if (this.issuePropertyKeysFilter == null) {
			this.issuePropertyKeysFilter = new ArrayList<>();
		}
		this.issuePropertyKeysFilter.add(issuePropertyKeysFilterItem);
		return this;
	}

	/**
	 * The JQL filter that specifies which issues the webhook is sent for.
	 * @return jqlFilter
	 **/
	public String getJqlFilter() {
		return jqlFilter;
	}

	/**
	 * Set jqlFilter
	 **/
	public void setJqlFilter(String jqlFilter) {
		this.jqlFilter = jqlFilter;
	}

	public Webhook jqlFilter(String jqlFilter) {
		this.jqlFilter = jqlFilter;
		return this;
	}


	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class Webhook {\n" +
			"    events: " + toIndentedString(events) + "\n" +
			"    expirationDate: " + toIndentedString(expirationDate) + "\n" +
			"    fieldIdsFilter: " + toIndentedString(fieldIdsFilter) + "\n" +
			"    id: " + toIndentedString(id) + "\n" +
			"    issuePropertyKeysFilter: " + toIndentedString(issuePropertyKeysFilter) + "\n" +
			"    jqlFilter: " + toIndentedString(jqlFilter) + "\n" +
			"}";
		return sb;
	}

	public enum EventsEnum {

		JIRA_ISSUE_CREATED("jira:issue_created"), JIRA_ISSUE_UPDATED("jira:issue_updated"), JIRA_ISSUE_DELETED("jira:issue_deleted"), COMMENT_CREATED("comment_created"), COMMENT_UPDATED("comment_updated"), COMMENT_DELETED("comment_deleted"), ISSUE_PROPERTY_SET("issue_property_set"), ISSUE_PROPERTY_DELETED("issue_property_deleted");


		String value;

		EventsEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
