/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import java.util.HashMap;
import java.util.Map;

/**
 * Details about the complexity of the analysed Jira expression.
 **/

public class JiraExpressionComplexity {

	/**
	 * Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
	 **/

	private String expensiveOperations;

	/**
	 * Variables used in the formula, mapped to the parts of the expression they refer to.
	 **/

	private Map<String, String> variables = null;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  &#x60;issues.map(i &#x3D;&gt; i.comments)&#x60; performs as many expensive operations as there are issues on the issues list. So this parameter returns &#x60;N&#x60;, where &#x60;N&#x60; is the size of issue list.  *  &#x60;new Issue(10010).comments&#x60; gets comments for one issue, so its complexity is &#x60;2&#x60; (&#x60;1&#x60; to retrieve issue 10010 from the database plus &#x60;1&#x60; to get its comments).
	 * @return expensiveOperations
	 **/
	public String getExpensiveOperations() {
		return expensiveOperations;
	}

	/**
	 * Set expensiveOperations
	 **/
	public void setExpensiveOperations(String expensiveOperations) {
		this.expensiveOperations = expensiveOperations;
	}

	public JiraExpressionComplexity expensiveOperations(String expensiveOperations) {
		this.expensiveOperations = expensiveOperations;
		return this;
	}

	/**
	 * Variables used in the formula, mapped to the parts of the expression they refer to.
	 * @return variables
	 **/
	public Map<String, String> getVariables() {
		return variables;
	}

	/**
	 * Set variables
	 **/
	public void setVariables(Map<String, String> variables) {
		this.variables = variables;
	}

	public JiraExpressionComplexity variables(Map<String, String> variables) {
		this.variables = variables;
		return this;
	}

	public JiraExpressionComplexity putVariablesItem(String key, String variablesItem) {
		if (this.variables == null) {
			this.variables = new HashMap<>();
		}
		this.variables.put(key, variablesItem);
		return this;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class JiraExpressionComplexity {\n" +
			"    expensiveOperations: " + toIndentedString(expensiveOperations) + "\n" +
			"    variables: " + toIndentedString(variables) + "\n" +
			"}";
		return sb;
	}
}
