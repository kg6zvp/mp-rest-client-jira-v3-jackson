/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;


public class WorkflowCapabilities {

	/**
	 * The Connect provided ecosystem rules available.
	 **/

	private List<AvailableWorkflowConnectRule> connectRules = null;
	/**
	 * The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
	 **/

	private EditorScopeEnum editorScope;
	/**
	 * The Forge provided ecosystem rules available.
	 **/

	private List<AvailableWorkflowForgeRule> forgeRules = null;
	/**
	 * The types of projects that this capability set is available for.
	 **/

	private List<ProjectTypesEnum> projectTypes = null;
	/**
	 * The Atlassian provided system rules available.
	 **/

	private List<AvailableWorkflowSystemRule> systemRules = null;
	/**
	 * The trigger rules available.
	 **/

	private List<AvailableWorkflowTriggers> triggerRules = null;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The Connect provided ecosystem rules available.
	 * @return connectRules
	 **/
	public List<AvailableWorkflowConnectRule> getConnectRules() {
		return connectRules;
	}

	/**
	 * Set connectRules
	 **/
	public void setConnectRules(List<AvailableWorkflowConnectRule> connectRules) {
		this.connectRules = connectRules;
	}

	public WorkflowCapabilities connectRules(List<AvailableWorkflowConnectRule> connectRules) {
		this.connectRules = connectRules;
		return this;
	}

	public WorkflowCapabilities addConnectRulesItem(AvailableWorkflowConnectRule connectRulesItem) {
		if (this.connectRules == null) {
			this.connectRules = new ArrayList<>();
		}
		this.connectRules.add(connectRulesItem);
		return this;
	}

	/**
	 * The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.
	 * @return editorScope
	 **/
	public EditorScopeEnum getEditorScope() {
		return editorScope;
	}

	/**
	 * Set editorScope
	 **/
	public void setEditorScope(EditorScopeEnum editorScope) {
		this.editorScope = editorScope;
	}

	public WorkflowCapabilities editorScope(EditorScopeEnum editorScope) {
		this.editorScope = editorScope;
		return this;
	}

	/**
	 * The Forge provided ecosystem rules available.
	 * @return forgeRules
	 **/
	public List<AvailableWorkflowForgeRule> getForgeRules() {
		return forgeRules;
	}

	/**
	 * Set forgeRules
	 **/
	public void setForgeRules(List<AvailableWorkflowForgeRule> forgeRules) {
		this.forgeRules = forgeRules;
	}

	public WorkflowCapabilities forgeRules(List<AvailableWorkflowForgeRule> forgeRules) {
		this.forgeRules = forgeRules;
		return this;
	}

	public WorkflowCapabilities addForgeRulesItem(AvailableWorkflowForgeRule forgeRulesItem) {
		if (this.forgeRules == null) {
			this.forgeRules = new ArrayList<>();
		}
		this.forgeRules.add(forgeRulesItem);
		return this;
	}

	/**
	 * The types of projects that this capability set is available for.
	 * @return projectTypes
	 **/
	public List<ProjectTypesEnum> getProjectTypes() {
		return projectTypes;
	}

	/**
	 * Set projectTypes
	 **/
	public void setProjectTypes(List<ProjectTypesEnum> projectTypes) {
		this.projectTypes = projectTypes;
	}

	public WorkflowCapabilities projectTypes(List<ProjectTypesEnum> projectTypes) {
		this.projectTypes = projectTypes;
		return this;
	}

	public WorkflowCapabilities addProjectTypesItem(ProjectTypesEnum projectTypesItem) {
		if (this.projectTypes == null) {
			this.projectTypes = new ArrayList<>();
		}
		this.projectTypes.add(projectTypesItem);
		return this;
	}

	/**
	 * The Atlassian provided system rules available.
	 * @return systemRules
	 **/
	public List<AvailableWorkflowSystemRule> getSystemRules() {
		return systemRules;
	}

	/**
	 * Set systemRules
	 **/
	public void setSystemRules(List<AvailableWorkflowSystemRule> systemRules) {
		this.systemRules = systemRules;
	}

	public WorkflowCapabilities systemRules(List<AvailableWorkflowSystemRule> systemRules) {
		this.systemRules = systemRules;
		return this;
	}

	public WorkflowCapabilities addSystemRulesItem(AvailableWorkflowSystemRule systemRulesItem) {
		if (this.systemRules == null) {
			this.systemRules = new ArrayList<>();
		}
		this.systemRules.add(systemRulesItem);
		return this;
	}

	/**
	 * The trigger rules available.
	 * @return triggerRules
	 **/
	public List<AvailableWorkflowTriggers> getTriggerRules() {
		return triggerRules;
	}

	/**
	 * Set triggerRules
	 **/
	public void setTriggerRules(List<AvailableWorkflowTriggers> triggerRules) {
		this.triggerRules = triggerRules;
	}

	public WorkflowCapabilities triggerRules(List<AvailableWorkflowTriggers> triggerRules) {
		this.triggerRules = triggerRules;
		return this;
	}

	public WorkflowCapabilities addTriggerRulesItem(AvailableWorkflowTriggers triggerRulesItem) {
		if (this.triggerRules == null) {
			this.triggerRules = new ArrayList<>();
		}
		this.triggerRules.add(triggerRulesItem);
		return this;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class WorkflowCapabilities {\n" +
			"    connectRules: " + toIndentedString(connectRules) + "\n" +
			"    editorScope: " + toIndentedString(editorScope) + "\n" +
			"    forgeRules: " + toIndentedString(forgeRules) + "\n" +
			"    projectTypes: " + toIndentedString(projectTypes) + "\n" +
			"    systemRules: " + toIndentedString(systemRules) + "\n" +
			"    triggerRules: " + toIndentedString(triggerRules) + "\n" +
			"}";
		return sb;
	}


	public enum EditorScopeEnum {

		PROJECT("PROJECT"), GLOBAL("GLOBAL");


		String value;

		EditorScopeEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}

	public enum ProjectTypesEnum {

		SOFTWARE("software"), SERVICE_DESK("service_desk"), PRODUCT_DISCOVERY("product_discovery"), BUSINESS("business"), UNKNOWN("unknown");


		String value;

		ProjectTypesEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
