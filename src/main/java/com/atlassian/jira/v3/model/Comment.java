/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

/**
 * A comment.
 **/

public class Comment extends HashMap<String, Object> {


	private CommentAuthor author;

	/**
	 * The comment text in [Atlassian Document Format](<a href="https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/">...</a>).
	 **/

	private Object body = null;

	/**
	 * The date and time at which the comment was created.
	 **/

	private Date created;

	/**
	 * The ID of the comment.
	 **/

	private String id;

	/**
	 * Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](<a href="https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/">...</a>)for information on setting up this feature.
	 **/

	private Boolean jsdAuthorCanSeeRequest;

	/**
	 * Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](<a href="https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post">...</a>) operation.
	 **/

	private Boolean jsdPublic;

	/**
	 * A list of comment properties. Optional on create and update.
	 **/

	private List<EntityProperty> properties = null;

	/**
	 * The rendered version of the comment.
	 **/

	private String renderedBody;

	/**
	 * The URL of the comment.
	 **/

	private String self;


	private CommentUpdateAuthor updateAuthor;

	/**
	 * The date and time at which the comment was updated last.
	 **/

	private Date updated;


	private Visibility visibility;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Get author
	 * @return author
	 **/
	public CommentAuthor getAuthor() {
		return author;
	}

	/**
	 * Set author
	 **/
	public void setAuthor(CommentAuthor author) {
		this.author = author;
	}

	public Comment author(CommentAuthor author) {
		this.author = author;
		return this;
	}

	/**
	 * The comment text in [Atlassian Document Format](<a href="https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/">...</a>).
	 * @return body
	 **/
	public Object getBody() {
		return body;
	}

	/**
	 * Set body
	 **/
	public void setBody(Object body) {
		this.body = body;
	}

	public Comment body(Object body) {
		this.body = body;
		return this;
	}

	/**
	 * The date and time at which the comment was created.
	 * @return created
	 **/
	public Date getCreated() {
		return created;
	}

	/**
	 * The ID of the comment.
	 * @return id
	 **/
	public String getId() {
		return id;
	}

	/**
	 * Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](<a href="https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/">...</a>)for information on setting up this feature.
	 * @return jsdAuthorCanSeeRequest
	 **/
	public Boolean getJsdAuthorCanSeeRequest() {
		return jsdAuthorCanSeeRequest;
	}

	/**
	 * Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn&#39;t use Jira Service Desk or the project isn&#39;t a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](<a href="https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post">...</a>) operation.
	 * @return jsdPublic
	 **/
	public Boolean getJsdPublic() {
		return jsdPublic;
	}

	/**
	 * A list of comment properties. Optional on create and update.
	 * @return properties
	 **/
	public List<EntityProperty> getProperties() {
		return properties;
	}

	/**
	 * Set properties
	 **/
	public void setProperties(List<EntityProperty> properties) {
		this.properties = properties;
	}

	public Comment properties(List<EntityProperty> properties) {
		this.properties = properties;
		return this;
	}

	public Comment addPropertiesItem(EntityProperty propertiesItem) {
		if (this.properties == null) {
			this.properties = new ArrayList<>();
		}
		this.properties.add(propertiesItem);
		return this;
	}

	/**
	 * The rendered version of the comment.
	 * @return renderedBody
	 **/
	public String getRenderedBody() {
		return renderedBody;
	}

	/**
	 * The URL of the comment.
	 * @return self
	 **/
	public String getSelf() {
		return self;
	}

	/**
	 * Get updateAuthor
	 * @return updateAuthor
	 **/
	public CommentUpdateAuthor getUpdateAuthor() {
		return updateAuthor;
	}

	/**
	 * Set updateAuthor
	 **/
	public void setUpdateAuthor(CommentUpdateAuthor updateAuthor) {
		this.updateAuthor = updateAuthor;
	}

	public Comment updateAuthor(CommentUpdateAuthor updateAuthor) {
		this.updateAuthor = updateAuthor;
		return this;
	}

	/**
	 * The date and time at which the comment was updated last.
	 * @return updated
	 **/
	public Date getUpdated() {
		return updated;
	}

	/**
	 * Get visibility
	 * @return visibility
	 **/
	public Visibility getVisibility() {
		return visibility;
	}

	/**
	 * Set visibility
	 **/
	public void setVisibility(Visibility visibility) {
		this.visibility = visibility;
	}

	public Comment visibility(Visibility visibility) {
		this.visibility = visibility;
		return this;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {
		String sb = "class Comment {\n" +
			"    " + toIndentedString(super.toString()) + "\n" +
			"    author: " + toIndentedString(author) + "\n" +
			"    body: " + toIndentedString(body) + "\n" +
			"    created: " + toIndentedString(created) + "\n" +
			"    id: " + toIndentedString(id) + "\n" +
			"    jsdAuthorCanSeeRequest: " + toIndentedString(jsdAuthorCanSeeRequest) + "\n" +
			"    jsdPublic: " + toIndentedString(jsdPublic) + "\n" +
			"    properties: " + toIndentedString(properties) + "\n" +
			"    renderedBody: " + toIndentedString(renderedBody) + "\n" +
			"    self: " + toIndentedString(self) + "\n" +
			"    updateAuthor: " + toIndentedString(updateAuthor) + "\n" +
			"    updated: " + toIndentedString(updated) + "\n" +
			"    visibility: " + toIndentedString(visibility) + "\n" +
			"}";
		return sb;
	}
}
