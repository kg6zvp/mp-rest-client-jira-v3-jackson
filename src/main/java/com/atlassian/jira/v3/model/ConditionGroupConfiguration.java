/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;

/**
 * The conditions group associated with the transition.
 **/

public class ConditionGroupConfiguration {

	/**
	 * The nested conditions of the condition group.
	 **/

	private List<ConditionGroupConfiguration> conditionGroups = null;

	/**
	 * The rules for this condition.
	 **/

	private List<WorkflowRuleConfiguration> conditions = null;
	/**
	 * Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
	 **/

	private OperationEnum operation;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The nested conditions of the condition group.
	 * @return conditionGroups
	 **/
	public List<ConditionGroupConfiguration> getConditionGroups() {
		return conditionGroups;
	}

	/**
	 * Set conditionGroups
	 **/
	public void setConditionGroups(List<ConditionGroupConfiguration> conditionGroups) {
		this.conditionGroups = conditionGroups;
	}

	public ConditionGroupConfiguration conditionGroups(List<ConditionGroupConfiguration> conditionGroups) {
		this.conditionGroups = conditionGroups;
		return this;
	}

	public ConditionGroupConfiguration addConditionGroupsItem(ConditionGroupConfiguration conditionGroupsItem) {
		if (this.conditionGroups == null) {
			this.conditionGroups = new ArrayList<>();
		}
		this.conditionGroups.add(conditionGroupsItem);
		return this;
	}

	/**
	 * The rules for this condition.
	 * @return conditions
	 **/
	public List<WorkflowRuleConfiguration> getConditions() {
		return conditions;
	}

	/**
	 * Set conditions
	 **/
	public void setConditions(List<WorkflowRuleConfiguration> conditions) {
		this.conditions = conditions;
	}

	public ConditionGroupConfiguration conditions(List<WorkflowRuleConfiguration> conditions) {
		this.conditions = conditions;
		return this;
	}

	public ConditionGroupConfiguration addConditionsItem(WorkflowRuleConfiguration conditionsItem) {
		if (this.conditions == null) {
			this.conditions = new ArrayList<>();
		}
		this.conditions.add(conditionsItem);
		return this;
	}

	/**
	 * Determines how the conditions in the group are evaluated. Accepts either &#x60;ANY&#x60; or &#x60;ALL&#x60;. If &#x60;ANY&#x60; is used, at least one condition in the group must be true for the group to evaluate to true. If &#x60;ALL&#x60; is used, all conditions in the group must be true for the group to evaluate to true.
	 * @return operation
	 **/
	public OperationEnum getOperation() {
		return operation;
	}

	/**
	 * Set operation
	 **/
	public void setOperation(OperationEnum operation) {
		this.operation = operation;
	}

	public ConditionGroupConfiguration operation(OperationEnum operation) {
		this.operation = operation;
		return this;
	}


	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class ConditionGroupConfiguration {\n" +
			"    conditionGroups: " + toIndentedString(conditionGroups) + "\n" +
			"    conditions: " + toIndentedString(conditions) + "\n" +
			"    operation: " + toIndentedString(operation) + "\n" +
			"}";
		return sb;
	}

	public enum OperationEnum {

		ANY("ANY"), ALL("ALL");


		String value;

		OperationEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
