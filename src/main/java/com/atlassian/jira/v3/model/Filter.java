/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

import java.net.URI;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Details about a filter.
 **/
@NoArgsConstructor
@AllArgsConstructor
public class Filter {

	/**
	 * \\[Experimental\\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
	 **/

	private Date approximateLastUsed;

	/**
	 * A description of the filter.
	 **/

	private String description;

	/**
	 * The groups and projects that can edit the filter.
	 **/

	private List<SharePermission> editPermissions = null;

	/**
	 * Whether the filter is selected as a favorite.
	 **/

	private Boolean favourite;

	/**
	 * The count of how many users have selected this filter as a favorite, including the filter owner.
	 **/

	private Long favouritedCount;

	/**
	 * The unique identifier for the filter.
	 **/

	private String id;

	/**
	 * The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
	 **/

	private String jql;

	/**
	 * The name of the filter. Must be unique.
	 **/

	private String name;


	private FilterOwner owner;

	/**
	 * A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
	 **/

	private URI searchUrl;

	/**
	 * The URL of the filter.
	 **/

	private URI self;

	/**
	 * The groups and projects that the filter is shared with.
	 **/

	private List<SharePermission> sharePermissions = null;


	private FilterSharedUsers sharedUsers;


	private FilterSubscriptions subscriptions;

	/**
	 * A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
	 **/

	private URI viewUrl;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * \\[Experimental\\] Approximate last used time. Returns the date and time when the filter was last used. Returns &#x60;null&#x60; if the filter hasn&#39;t been used after tracking was enabled. For performance reasons, timestamps aren&#39;t updated in real time and therefore may not be exactly accurate.
	 * @return approximateLastUsed
	 **/
	public Date getApproximateLastUsed() {
		return approximateLastUsed;
	}

	/**
	 * A description of the filter.
	 * @return description
	 **/
	public String getDescription() {
		return description;
	}

	/**
	 * Set description
	 **/
	public void setDescription(String description) {
		this.description = description;
	}

	public Filter description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * The groups and projects that can edit the filter.
	 * @return editPermissions
	 **/
	public List<SharePermission> getEditPermissions() {
		return editPermissions;
	}

	/**
	 * Set editPermissions
	 **/
	public void setEditPermissions(List<SharePermission> editPermissions) {
		this.editPermissions = editPermissions;
	}

	public Filter editPermissions(List<SharePermission> editPermissions) {
		this.editPermissions = editPermissions;
		return this;
	}

	public Filter addEditPermissionsItem(SharePermission editPermissionsItem) {
		if (this.editPermissions == null) {
			this.editPermissions = new ArrayList<>();
		}
		this.editPermissions.add(editPermissionsItem);
		return this;
	}

	/**
	 * Whether the filter is selected as a favorite.
	 * @return favourite
	 **/
	public Boolean getFavourite() {
		return favourite;
	}

	/**
	 * Set favourite
	 **/
	public void setFavourite(Boolean favourite) {
		this.favourite = favourite;
	}

	public Filter favourite(Boolean favourite) {
		this.favourite = favourite;
		return this;
	}

	/**
	 * The count of how many users have selected this filter as a favorite, including the filter owner.
	 * @return favouritedCount
	 **/
	public Long getFavouritedCount() {
		return favouritedCount;
	}

	/**
	 * The unique identifier for the filter.
	 * @return id
	 **/
	public String getId() {
		return id;
	}

	/**
	 * The JQL query for the filter. For example, *project &#x3D; SSP AND issuetype &#x3D; Bug*.
	 * @return jql
	 **/
	public String getJql() {
		return jql;
	}

	/**
	 * Set jql
	 **/
	public void setJql(String jql) {
		this.jql = jql;
	}

	public Filter jql(String jql) {
		this.jql = jql;
		return this;
	}

	/**
	 * The name of the filter. Must be unique.
	 * @return name
	 **/
	public String getName() {
		return name;
	}

	/**
	 * Set name
	 **/
	public void setName(String name) {
		this.name = name;
	}

	public Filter name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * Get owner
	 * @return owner
	 **/
	public FilterOwner getOwner() {
		return owner;
	}

	/**
	 * Set owner
	 **/
	public void setOwner(FilterOwner owner) {
		this.owner = owner;
	}

	public Filter owner(FilterOwner owner) {
		this.owner = owner;
		return this;
	}

	/**
	 * A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter&#39;s JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql&#x3D;project+%3D+SSP+AND+issuetype+%3D+Bug*.
	 * @return searchUrl
	 **/
	public URI getSearchUrl() {
		return searchUrl;
	}

	/**
	 * The URL of the filter.
	 * @return self
	 **/
	public URI getSelf() {
		return self;
	}

	/**
	 * The groups and projects that the filter is shared with.
	 * @return sharePermissions
	 **/
	public List<SharePermission> getSharePermissions() {
		return sharePermissions;
	}

	/**
	 * Set sharePermissions
	 **/
	public void setSharePermissions(List<SharePermission> sharePermissions) {
		this.sharePermissions = sharePermissions;
	}

	public Filter sharePermissions(List<SharePermission> sharePermissions) {
		this.sharePermissions = sharePermissions;
		return this;
	}

	public Filter addSharePermissionsItem(SharePermission sharePermissionsItem) {
		if (this.sharePermissions == null) {
			this.sharePermissions = new ArrayList<>();
		}
		this.sharePermissions.add(sharePermissionsItem);
		return this;
	}

	/**
	 * Get sharedUsers
	 * @return sharedUsers
	 **/
	public FilterSharedUsers getSharedUsers() {
		return sharedUsers;
	}

	/**
	 * Set sharedUsers
	 **/
	public void setSharedUsers(FilterSharedUsers sharedUsers) {
		this.sharedUsers = sharedUsers;
	}

	public Filter sharedUsers(FilterSharedUsers sharedUsers) {
		this.sharedUsers = sharedUsers;
		return this;
	}

	/**
	 * Get subscriptions
	 * @return subscriptions
	 **/
	public FilterSubscriptions getSubscriptions() {
		return subscriptions;
	}

	/**
	 * Set subscriptions
	 **/
	public void setSubscriptions(FilterSubscriptions subscriptions) {
		this.subscriptions = subscriptions;
	}

	public Filter subscriptions(FilterSubscriptions subscriptions) {
		this.subscriptions = subscriptions;
		return this;
	}

	/**
	 * A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter&#x3D;10100*.
	 * @return viewUrl
	 **/
	public URI getViewUrl() {
		return viewUrl;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class Filter {\n" +
			"    approximateLastUsed: " + toIndentedString(approximateLastUsed) + "\n" +
			"    description: " + toIndentedString(description) + "\n" +
			"    editPermissions: " + toIndentedString(editPermissions) + "\n" +
			"    favourite: " + toIndentedString(favourite) + "\n" +
			"    favouritedCount: " + toIndentedString(favouritedCount) + "\n" +
			"    id: " + toIndentedString(id) + "\n" +
			"    jql: " + toIndentedString(jql) + "\n" +
			"    name: " + toIndentedString(name) + "\n" +
			"    owner: " + toIndentedString(owner) + "\n" +
			"    searchUrl: " + toIndentedString(searchUrl) + "\n" +
			"    self: " + toIndentedString(self) + "\n" +
			"    sharePermissions: " + toIndentedString(sharePermissions) + "\n" +
			"    sharedUsers: " + toIndentedString(sharedUsers) + "\n" +
			"    subscriptions: " + toIndentedString(subscriptions) + "\n" +
			"    viewUrl: " + toIndentedString(viewUrl) + "\n" +
			"}";
		return sb;
	}
}
