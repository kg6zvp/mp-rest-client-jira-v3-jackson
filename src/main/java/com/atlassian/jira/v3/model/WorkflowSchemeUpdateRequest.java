/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * The update workflow scheme payload.
 **/

public class WorkflowSchemeUpdateRequest extends HashMap<String, Object> {

	/**
	 * The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*.
	 **/

	private String defaultWorkflowId;

	/**
	 * The new description for this workflow scheme.
	 **/

	private String description;

	/**
	 * The ID of this workflow scheme.
	 **/

	private String id;

	/**
	 * The new name for this workflow scheme.
	 **/

	private String name;

	/**
	 * Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
	 **/

	private List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride = null;

	/**
	 * The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
	 **/

	private List<MappingsByWorkflow> statusMappingsByWorkflows = null;


	private DocumentVersion version;

	/**
	 * Mappings from workflows to issue types.
	 **/

	private List<WorkflowSchemeAssociation> workflowsForIssueTypes = null;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the &#x60;defaultWorkflowId&#x60; isn&#39;t specified, this is set to *Jira Workflow (jira)*.
	 * @return defaultWorkflowId
	 **/
	public String getDefaultWorkflowId() {
		return defaultWorkflowId;
	}

	/**
	 * Set defaultWorkflowId
	 **/
	public void setDefaultWorkflowId(String defaultWorkflowId) {
		this.defaultWorkflowId = defaultWorkflowId;
	}

	public WorkflowSchemeUpdateRequest defaultWorkflowId(String defaultWorkflowId) {
		this.defaultWorkflowId = defaultWorkflowId;
		return this;
	}

	/**
	 * The new description for this workflow scheme.
	 * @return description
	 **/
	public String getDescription() {
		return description;
	}

	/**
	 * Set description
	 **/
	public void setDescription(String description) {
		this.description = description;
	}

	public WorkflowSchemeUpdateRequest description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * The ID of this workflow scheme.
	 * @return id
	 **/
	public String getId() {
		return id;
	}

	/**
	 * Set id
	 **/
	public void setId(String id) {
		this.id = id;
	}

	public WorkflowSchemeUpdateRequest id(String id) {
		this.id = id;
		return this;
	}

	/**
	 * The new name for this workflow scheme.
	 * @return name
	 **/
	public String getName() {
		return name;
	}

	/**
	 * Set name
	 **/
	public void setName(String name) {
		this.name = name;
	}

	public WorkflowSchemeUpdateRequest name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * Overrides, for the selected issue types, any status mappings provided in &#x60;statusMappingsByWorkflows&#x60;. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
	 * @return statusMappingsByIssueTypeOverride
	 **/
	public List<MappingsByIssueTypeOverride> getStatusMappingsByIssueTypeOverride() {
		return statusMappingsByIssueTypeOverride;
	}

	/**
	 * Set statusMappingsByIssueTypeOverride
	 **/
	public void setStatusMappingsByIssueTypeOverride(List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride) {
		this.statusMappingsByIssueTypeOverride = statusMappingsByIssueTypeOverride;
	}

	public WorkflowSchemeUpdateRequest statusMappingsByIssueTypeOverride(List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride) {
		this.statusMappingsByIssueTypeOverride = statusMappingsByIssueTypeOverride;
		return this;
	}

	public WorkflowSchemeUpdateRequest addStatusMappingsByIssueTypeOverrideItem(MappingsByIssueTypeOverride statusMappingsByIssueTypeOverrideItem) {
		if (this.statusMappingsByIssueTypeOverride == null) {
			this.statusMappingsByIssueTypeOverride = new ArrayList<>();
		}
		this.statusMappingsByIssueTypeOverride.add(statusMappingsByIssueTypeOverrideItem);
		return this;
	}

	/**
	 * The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
	 * @return statusMappingsByWorkflows
	 **/
	public List<MappingsByWorkflow> getStatusMappingsByWorkflows() {
		return statusMappingsByWorkflows;
	}

	/**
	 * Set statusMappingsByWorkflows
	 **/
	public void setStatusMappingsByWorkflows(List<MappingsByWorkflow> statusMappingsByWorkflows) {
		this.statusMappingsByWorkflows = statusMappingsByWorkflows;
	}

	public WorkflowSchemeUpdateRequest statusMappingsByWorkflows(List<MappingsByWorkflow> statusMappingsByWorkflows) {
		this.statusMappingsByWorkflows = statusMappingsByWorkflows;
		return this;
	}

	public WorkflowSchemeUpdateRequest addStatusMappingsByWorkflowsItem(MappingsByWorkflow statusMappingsByWorkflowsItem) {
		if (this.statusMappingsByWorkflows == null) {
			this.statusMappingsByWorkflows = new ArrayList<>();
		}
		this.statusMappingsByWorkflows.add(statusMappingsByWorkflowsItem);
		return this;
	}

	/**
	 * Get version
	 * @return version
	 **/
	public DocumentVersion getVersion() {
		return version;
	}

	/**
	 * Set version
	 **/
	public void setVersion(DocumentVersion version) {
		this.version = version;
	}

	public WorkflowSchemeUpdateRequest version(DocumentVersion version) {
		this.version = version;
		return this;
	}

	/**
	 * Mappings from workflows to issue types.
	 * @return workflowsForIssueTypes
	 **/
	public List<WorkflowSchemeAssociation> getWorkflowsForIssueTypes() {
		return workflowsForIssueTypes;
	}

	/**
	 * Set workflowsForIssueTypes
	 **/
	public void setWorkflowsForIssueTypes(List<WorkflowSchemeAssociation> workflowsForIssueTypes) {
		this.workflowsForIssueTypes = workflowsForIssueTypes;
	}

	public WorkflowSchemeUpdateRequest workflowsForIssueTypes(List<WorkflowSchemeAssociation> workflowsForIssueTypes) {
		this.workflowsForIssueTypes = workflowsForIssueTypes;
		return this;
	}

	public WorkflowSchemeUpdateRequest addWorkflowsForIssueTypesItem(WorkflowSchemeAssociation workflowsForIssueTypesItem) {
		if (this.workflowsForIssueTypes == null) {
			this.workflowsForIssueTypes = new ArrayList<>();
		}
		this.workflowsForIssueTypes.add(workflowsForIssueTypesItem);
		return this;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {
		String sb = "class WorkflowSchemeUpdateRequest {\n" +
			"    " + toIndentedString(super.toString()) + "\n" +
			"    defaultWorkflowId: " + toIndentedString(defaultWorkflowId) + "\n" +
			"    description: " + toIndentedString(description) + "\n" +
			"    id: " + toIndentedString(id) + "\n" +
			"    name: " + toIndentedString(name) + "\n" +
			"    statusMappingsByIssueTypeOverride: " + toIndentedString(statusMappingsByIssueTypeOverride) + "\n" +
			"    statusMappingsByWorkflows: " + toIndentedString(statusMappingsByWorkflows) + "\n" +
			"    version: " + toIndentedString(version) + "\n" +
			"    workflowsForIssueTypes: " + toIndentedString(workflowsForIssueTypes) + "\n" +
			"}";
		return sb;
	}
}
