/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The configuration of time tracking.
 **/

public class ConfigurationTimeTrackingConfiguration {

	/**
	 * The default unit of time applied to logged time.
	 **/

	private DefaultUnitEnum defaultUnit;
	/**
	 * The format that will appear on an issue's *Time Spent* field.
	 **/

	private TimeFormatEnum timeFormat;
	/**
	 * The number of days in a working week.
	 **/

	private Double workingDaysPerWeek;
	/**
	 * The number of hours in a working day.
	 **/

	private Double workingHoursPerDay;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The default unit of time applied to logged time.
	 * @return defaultUnit
	 **/
	public DefaultUnitEnum getDefaultUnit() {
		return defaultUnit;
	}

	/**
	 * Set defaultUnit
	 **/
	public void setDefaultUnit(DefaultUnitEnum defaultUnit) {
		this.defaultUnit = defaultUnit;
	}

	public ConfigurationTimeTrackingConfiguration defaultUnit(DefaultUnitEnum defaultUnit) {
		this.defaultUnit = defaultUnit;
		return this;
	}

	/**
	 * The format that will appear on an issue&#39;s *Time Spent* field.
	 * @return timeFormat
	 **/
	public TimeFormatEnum getTimeFormat() {
		return timeFormat;
	}

	/**
	 * Set timeFormat
	 **/
	public void setTimeFormat(TimeFormatEnum timeFormat) {
		this.timeFormat = timeFormat;
	}

	public ConfigurationTimeTrackingConfiguration timeFormat(TimeFormatEnum timeFormat) {
		this.timeFormat = timeFormat;
		return this;
	}

	/**
	 * The number of days in a working week.
	 * @return workingDaysPerWeek
	 **/
	public Double getWorkingDaysPerWeek() {
		return workingDaysPerWeek;
	}

	/**
	 * Set workingDaysPerWeek
	 **/
	public void setWorkingDaysPerWeek(Double workingDaysPerWeek) {
		this.workingDaysPerWeek = workingDaysPerWeek;
	}

	public ConfigurationTimeTrackingConfiguration workingDaysPerWeek(Double workingDaysPerWeek) {
		this.workingDaysPerWeek = workingDaysPerWeek;
		return this;
	}

	/**
	 * The number of hours in a working day.
	 * @return workingHoursPerDay
	 **/
	public Double getWorkingHoursPerDay() {
		return workingHoursPerDay;
	}

	/**
	 * Set workingHoursPerDay
	 **/
	public void setWorkingHoursPerDay(Double workingHoursPerDay) {
		this.workingHoursPerDay = workingHoursPerDay;
	}

	public ConfigurationTimeTrackingConfiguration workingHoursPerDay(Double workingHoursPerDay) {
		this.workingHoursPerDay = workingHoursPerDay;
		return this;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class ConfigurationTimeTrackingConfiguration {\n" +
			"    defaultUnit: " + toIndentedString(defaultUnit) + "\n" +
			"    timeFormat: " + toIndentedString(timeFormat) + "\n" +
			"    workingDaysPerWeek: " + toIndentedString(workingDaysPerWeek) + "\n" +
			"    workingHoursPerDay: " + toIndentedString(workingHoursPerDay) + "\n" +
			"}";
		return sb;
	}


	public enum DefaultUnitEnum {

		MINUTE("minute"), HOUR("hour"), DAY("day"), WEEK("week");


		String value;

		DefaultUnitEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}

	public enum TimeFormatEnum {

		PRETTY("pretty"), DAYS("days"), HOURS("hours");


		String value;

		TimeFormatEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
