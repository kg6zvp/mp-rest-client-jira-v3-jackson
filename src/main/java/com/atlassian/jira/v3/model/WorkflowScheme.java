/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

/**
 * Details about a workflow scheme.
 **/
@NoArgsConstructor
@AllArgsConstructor
public class WorkflowScheme {

	/**
	 * The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
	 **/

	private String defaultWorkflow;

	/**
	 * The description of the workflow scheme.
	 **/

	private String description;

	/**
	 * Whether the workflow scheme is a draft or not.
	 **/

	private Boolean draft;

	/**
	 * The ID of the workflow scheme.
	 **/

	private Long id;

	/**
	 * The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
	 **/

	private Map<String, String> issueTypeMappings = null;

	/**
	 * The issue types available in Jira.
	 **/

	private Map<String, IssueTypeDetails> issueTypes = null;

	/**
	 * The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
	 **/

	private String lastModified;


	private WorkflowSchemeLastModifiedUser lastModifiedUser;

	/**
	 * The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
	 **/

	private String name;

	/**
	 * For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
	 **/

	private String originalDefaultWorkflow;

	/**
	 * For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
	 **/

	private Map<String, String> originalIssueTypeMappings = null;


	private URI self;

	/**
	 * Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to `false`.
	 **/

	private Boolean updateDraftIfNeeded;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
	 * @return defaultWorkflow
	 **/
	public String getDefaultWorkflow() {
		return defaultWorkflow;
	}

	/**
	 * Set defaultWorkflow
	 **/
	public void setDefaultWorkflow(String defaultWorkflow) {
		this.defaultWorkflow = defaultWorkflow;
	}

	public WorkflowScheme defaultWorkflow(String defaultWorkflow) {
		this.defaultWorkflow = defaultWorkflow;
		return this;
	}

	/**
	 * The description of the workflow scheme.
	 * @return description
	 **/
	public String getDescription() {
		return description;
	}

	/**
	 * Set description
	 **/
	public void setDescription(String description) {
		this.description = description;
	}

	public WorkflowScheme description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Whether the workflow scheme is a draft or not.
	 * @return draft
	 **/
	public Boolean getDraft() {
		return draft;
	}

	/**
	 * The ID of the workflow scheme.
	 * @return id
	 **/
	public Long getId() {
		return id;
	}

	/**
	 * The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
	 * @return issueTypeMappings
	 **/
	public Map<String, String> getIssueTypeMappings() {
		return issueTypeMappings;
	}

	/**
	 * Set issueTypeMappings
	 **/
	public void setIssueTypeMappings(Map<String, String> issueTypeMappings) {
		this.issueTypeMappings = issueTypeMappings;
	}

	public WorkflowScheme issueTypeMappings(Map<String, String> issueTypeMappings) {
		this.issueTypeMappings = issueTypeMappings;
		return this;
	}

	public WorkflowScheme putIssueTypeMappingsItem(String key, String issueTypeMappingsItem) {
		if (this.issueTypeMappings == null) {
			this.issueTypeMappings = new HashMap<>();
		}
		this.issueTypeMappings.put(key, issueTypeMappingsItem);
		return this;
	}

	/**
	 * The issue types available in Jira.
	 * @return issueTypes
	 **/
	public Map<String, IssueTypeDetails> getIssueTypes() {
		return issueTypes;
	}

	/**
	 * The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
	 * @return lastModified
	 **/
	public String getLastModified() {
		return lastModified;
	}

	/**
	 * Get lastModifiedUser
	 * @return lastModifiedUser
	 **/
	public WorkflowSchemeLastModifiedUser getLastModifiedUser() {
		return lastModifiedUser;
	}

	/**
	 * Set lastModifiedUser
	 **/
	public void setLastModifiedUser(WorkflowSchemeLastModifiedUser lastModifiedUser) {
		this.lastModifiedUser = lastModifiedUser;
	}

	public WorkflowScheme lastModifiedUser(WorkflowSchemeLastModifiedUser lastModifiedUser) {
		this.lastModifiedUser = lastModifiedUser;
		return this;
	}

	/**
	 * The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
	 * @return name
	 **/
	public String getName() {
		return name;
	}

	/**
	 * Set name
	 **/
	public void setName(String name) {
		this.name = name;
	}

	public WorkflowScheme name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
	 * @return originalDefaultWorkflow
	 **/
	public String getOriginalDefaultWorkflow() {
		return originalDefaultWorkflow;
	}

	/**
	 * For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
	 * @return originalIssueTypeMappings
	 **/
	public Map<String, String> getOriginalIssueTypeMappings() {
		return originalIssueTypeMappings;
	}

	/**
	 * Get self
	 * @return self
	 **/
	public URI getSelf() {
		return self;
	}

	/**
	 * Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;.
	 * @return updateDraftIfNeeded
	 **/
	public Boolean getUpdateDraftIfNeeded() {
		return updateDraftIfNeeded;
	}

	/**
	 * Set updateDraftIfNeeded
	 **/
	public void setUpdateDraftIfNeeded(Boolean updateDraftIfNeeded) {
		this.updateDraftIfNeeded = updateDraftIfNeeded;
	}

	public WorkflowScheme updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
		this.updateDraftIfNeeded = updateDraftIfNeeded;
		return this;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class WorkflowScheme {\n" +
			"    defaultWorkflow: " + toIndentedString(defaultWorkflow) + "\n" +
			"    description: " + toIndentedString(description) + "\n" +
			"    draft: " + toIndentedString(draft) + "\n" +
			"    id: " + toIndentedString(id) + "\n" +
			"    issueTypeMappings: " + toIndentedString(issueTypeMappings) + "\n" +
			"    issueTypes: " + toIndentedString(issueTypes) + "\n" +
			"    lastModified: " + toIndentedString(lastModified) + "\n" +
			"    lastModifiedUser: " + toIndentedString(lastModifiedUser) + "\n" +
			"    name: " + toIndentedString(name) + "\n" +
			"    originalDefaultWorkflow: " + toIndentedString(originalDefaultWorkflow) + "\n" +
			"    originalIssueTypeMappings: " + toIndentedString(originalIssueTypeMappings) + "\n" +
			"    self: " + toIndentedString(self) + "\n" +
			"    updateDraftIfNeeded: " + toIndentedString(updateDraftIfNeeded) + "\n" +
			"}";
		return sb;
	}
}
