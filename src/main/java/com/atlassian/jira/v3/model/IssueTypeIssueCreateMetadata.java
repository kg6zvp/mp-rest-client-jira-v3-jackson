/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import java.util.Map;
import java.util.UUID;

/**
 * Details of the issue creation metadata for an issue type.
 **/

public class IssueTypeIssueCreateMetadata {

	/**
	 * The ID of the issue type's avatar.
	 **/

	private Long avatarId;

	/**
	 * The description of the issue type.
	 **/

	private String description;

	/**
	 * Unique ID for next-gen projects.
	 **/

	private UUID entityId;

	/**
	 * Expand options that include additional issue type metadata details in the response.
	 **/

	private String expand;

	/**
	 * List of the fields available when creating an issue for the issue type.
	 **/

	private Map<String, FieldMetadata> fields = null;

	/**
	 * Hierarchy level of the issue type.
	 **/

	private Integer hierarchyLevel;

	/**
	 * The URL of the issue type's avatar.
	 **/

	private String iconUrl;

	/**
	 * The ID of the issue type.
	 **/

	private String id;

	/**
	 * The name of the issue type.
	 **/

	private String name;


	private IssueTypeDetailsScope scope;

	/**
	 * The URL of these issue type details.
	 **/

	private String self;

	/**
	 * Whether this issue type is used to create subtasks.
	 **/

	private Boolean subtask;

	public IssueTypeIssueCreateMetadata() {
	}


	public IssueTypeIssueCreateMetadata(
		Long avatarId,
		String description,
		UUID entityId,
		String expand,
		Map<String, FieldMetadata> fields,
		Integer hierarchyLevel,
		String iconUrl,
		String id,
		String name,
		String self,
		Boolean subtask
	) {
		this.avatarId = avatarId;
		this.description = description;
		this.entityId = entityId;
		this.expand = expand;
		this.fields = fields;
		this.hierarchyLevel = hierarchyLevel;
		this.iconUrl = iconUrl;
		this.id = id;
		this.name = name;
		this.self = self;
		this.subtask = subtask;
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The ID of the issue type&#39;s avatar.
	 * @return avatarId
	 **/
	public Long getAvatarId() {
		return avatarId;
	}

	/**
	 * The description of the issue type.
	 * @return description
	 **/
	public String getDescription() {
		return description;
	}

	/**
	 * Unique ID for next-gen projects.
	 * @return entityId
	 **/
	public UUID getEntityId() {
		return entityId;
	}

	/**
	 * Expand options that include additional issue type metadata details in the response.
	 * @return expand
	 **/
	public String getExpand() {
		return expand;
	}

	/**
	 * List of the fields available when creating an issue for the issue type.
	 * @return fields
	 **/
	public Map<String, FieldMetadata> getFields() {
		return fields;
	}

	/**
	 * Hierarchy level of the issue type.
	 * @return hierarchyLevel
	 **/
	public Integer getHierarchyLevel() {
		return hierarchyLevel;
	}

	/**
	 * The URL of the issue type&#39;s avatar.
	 * @return iconUrl
	 **/
	public String getIconUrl() {
		return iconUrl;
	}

	/**
	 * The ID of the issue type.
	 * @return id
	 **/
	public String getId() {
		return id;
	}

	/**
	 * The name of the issue type.
	 * @return name
	 **/
	public String getName() {
		return name;
	}

	/**
	 * Get scope
	 * @return scope
	 **/
	public IssueTypeDetailsScope getScope() {
		return scope;
	}

	/**
	 * Set scope
	 **/
	public void setScope(IssueTypeDetailsScope scope) {
		this.scope = scope;
	}

	public IssueTypeIssueCreateMetadata scope(IssueTypeDetailsScope scope) {
		this.scope = scope;
		return this;
	}

	/**
	 * The URL of these issue type details.
	 * @return self
	 **/
	public String getSelf() {
		return self;
	}

	/**
	 * Whether this issue type is used to create subtasks.
	 * @return subtask
	 **/
	public Boolean getSubtask() {
		return subtask;
	}

	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class IssueTypeIssueCreateMetadata {\n" +
			"    avatarId: " + toIndentedString(avatarId) + "\n" +
			"    description: " + toIndentedString(description) + "\n" +
			"    entityId: " + toIndentedString(entityId) + "\n" +
			"    expand: " + toIndentedString(expand) + "\n" +
			"    fields: " + toIndentedString(fields) + "\n" +
			"    hierarchyLevel: " + toIndentedString(hierarchyLevel) + "\n" +
			"    iconUrl: " + toIndentedString(iconUrl) + "\n" +
			"    id: " + toIndentedString(id) + "\n" +
			"    name: " + toIndentedString(name) + "\n" +
			"    scope: " + toIndentedString(scope) + "\n" +
			"    self: " + toIndentedString(self) + "\n" +
			"    subtask: " + toIndentedString(subtask) + "\n" +
			"}";
		return sb;
	}
}
