/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 * <p>
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;

/**
 * A list of webhooks.
 **/

public class WebhookDetails {

	/**
	 * The Jira events that trigger the webhook.
	 **/

	private List<EventsEnum> events = new ArrayList<>();
	/**
	 * A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
	 **/

	private List<String> fieldIdsFilter = null;
	/**
	 * A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
	 **/

	private List<String> issuePropertyKeysFilter = null;
	/**
	 * The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:   *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.\".  *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
	 **/

	private String jqlFilter;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * The Jira events that trigger the webhook.
	 * @return events
	 **/
	public List<EventsEnum> getEvents() {
		return events;
	}

	/**
	 * Set events
	 **/
	public void setEvents(List<EventsEnum> events) {
		this.events = events;
	}

	public WebhookDetails events(List<EventsEnum> events) {
		this.events = events;
		return this;
	}

	public WebhookDetails addEventsItem(EventsEnum eventsItem) {
		if (this.events == null) {
			this.events = new ArrayList<>();
		}
		this.events.add(eventsItem);
		return this;
	}

	/**
	 * A list of field IDs. When the issue changelog contains any of the fields, the webhook &#x60;jira:issue_updated&#x60; is sent. If this parameter is not present, the app is notified about all field updates.
	 * @return fieldIdsFilter
	 **/
	public List<String> getFieldIdsFilter() {
		return fieldIdsFilter;
	}

	/**
	 * Set fieldIdsFilter
	 **/
	public void setFieldIdsFilter(List<String> fieldIdsFilter) {
		this.fieldIdsFilter = fieldIdsFilter;
	}

	public WebhookDetails fieldIdsFilter(List<String> fieldIdsFilter) {
		this.fieldIdsFilter = fieldIdsFilter;
		return this;
	}

	public WebhookDetails addFieldIdsFilterItem(String fieldIdsFilterItem) {
		if (this.fieldIdsFilter == null) {
			this.fieldIdsFilter = new ArrayList<>();
		}
		this.fieldIdsFilter.add(fieldIdsFilterItem);
		return this;
	}

	/**
	 * A list of issue property keys. A change of those issue properties triggers the &#x60;issue_property_set&#x60; or &#x60;issue_property_deleted&#x60; webhooks. If this parameter is not present, the app is notified about all issue property updates.
	 * @return issuePropertyKeysFilter
	 **/
	public List<String> getIssuePropertyKeysFilter() {
		return issuePropertyKeysFilter;
	}

	/**
	 * Set issuePropertyKeysFilter
	 **/
	public void setIssuePropertyKeysFilter(List<String> issuePropertyKeysFilter) {
		this.issuePropertyKeysFilter = issuePropertyKeysFilter;
	}

	public WebhookDetails issuePropertyKeysFilter(List<String> issuePropertyKeysFilter) {
		this.issuePropertyKeysFilter = issuePropertyKeysFilter;
		return this;
	}

	public WebhookDetails addIssuePropertyKeysFilterItem(String issuePropertyKeysFilterItem) {
		if (this.issuePropertyKeysFilter == null) {
			this.issuePropertyKeysFilter = new ArrayList<>();
		}
		this.issuePropertyKeysFilter.add(issuePropertyKeysFilterItem);
		return this;
	}

	/**
	 * The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:   *  Fields: &#x60;issueKey&#x60;, &#x60;project&#x60;, &#x60;issuetype&#x60;, &#x60;status&#x60;, &#x60;assignee&#x60;, &#x60;reporter&#x60;, &#x60;issue.property&#x60;, and &#x60;cf[id]&#x60;. For custom fields (&#x60;cf[id]&#x60;), only the epic label custom field is supported.\&quot;.  *  Operators: &#x60;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;IN&#x60;, and &#x60;NOT IN&#x60;.
	 * @return jqlFilter
	 **/
	public String getJqlFilter() {
		return jqlFilter;
	}

	/**
	 * Set jqlFilter
	 **/
	public void setJqlFilter(String jqlFilter) {
		this.jqlFilter = jqlFilter;
	}

	public WebhookDetails jqlFilter(String jqlFilter) {
		this.jqlFilter = jqlFilter;
		return this;
	}


	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class WebhookDetails {\n" +
			"    events: " + toIndentedString(events) + "\n" +
			"    fieldIdsFilter: " + toIndentedString(fieldIdsFilter) + "\n" +
			"    issuePropertyKeysFilter: " + toIndentedString(issuePropertyKeysFilter) + "\n" +
			"    jqlFilter: " + toIndentedString(jqlFilter) + "\n" +
			"}";
		return sb;
	}

	public enum EventsEnum {

		JIRA_ISSUE_CREATED("jira:issue_created"), JIRA_ISSUE_UPDATED("jira:issue_updated"), JIRA_ISSUE_DELETED("jira:issue_deleted"), COMMENT_CREATED("comment_created"), COMMENT_UPDATED("comment_updated"), COMMENT_DELETED("comment_deleted"), ISSUE_PROPERTY_SET("issue_property_set"), ISSUE_PROPERTY_DELETED("issue_property_deleted");


		String value;

		EventsEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
