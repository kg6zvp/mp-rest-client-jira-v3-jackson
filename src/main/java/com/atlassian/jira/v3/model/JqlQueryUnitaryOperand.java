/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-8b1a1ff5508af1eb786f141e37a6e5e53cbc3737
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.atlassian.jira.v3.model;

import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;

/**
 * An operand that can be part of a list operand.
 **/

public class JqlQueryUnitaryOperand {

	/**
	 * Encoded value, which can be used directly in a JQL query.
	 **/

	private String encodedValue;

	/**
	 * The operand value.
	 **/

	private String value;

	/**
	 * The list of function arguments.
	 **/

	private List<String> arguments = new ArrayList<>();

	/**
	 * Encoded operand, which can be used directly in a JQL query.
	 **/

	private String encodedOperand;

	/**
	 * The name of the function.
	 **/

	private String function;
	/**
	 * The keyword that is the operand value.
	 **/

	private KeywordEnum keyword;

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private static String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Encoded value, which can be used directly in a JQL query.
	 * @return encodedValue
	 **/
	public String getEncodedValue() {
		return encodedValue;
	}

	/**
	 * Set encodedValue
	 **/
	public void setEncodedValue(String encodedValue) {
		this.encodedValue = encodedValue;
	}

	public JqlQueryUnitaryOperand encodedValue(String encodedValue) {
		this.encodedValue = encodedValue;
		return this;
	}

	/**
	 * The operand value.
	 * @return value
	 **/
	public String getValue() {
		return value;
	}

	/**
	 * Set value
	 **/
	public void setValue(String value) {
		this.value = value;
	}

	public JqlQueryUnitaryOperand value(String value) {
		this.value = value;
		return this;
	}

	/**
	 * The list of function arguments.
	 * @return arguments
	 **/
	public List<String> getArguments() {
		return arguments;
	}

	/**
	 * Set arguments
	 **/
	public void setArguments(List<String> arguments) {
		this.arguments = arguments;
	}

	public JqlQueryUnitaryOperand arguments(List<String> arguments) {
		this.arguments = arguments;
		return this;
	}

	public JqlQueryUnitaryOperand addArgumentsItem(String argumentsItem) {
		if (this.arguments == null) {
			this.arguments = new ArrayList<>();
		}
		this.arguments.add(argumentsItem);
		return this;
	}

	/**
	 * Encoded operand, which can be used directly in a JQL query.
	 * @return encodedOperand
	 **/
	public String getEncodedOperand() {
		return encodedOperand;
	}

	/**
	 * Set encodedOperand
	 **/
	public void setEncodedOperand(String encodedOperand) {
		this.encodedOperand = encodedOperand;
	}

	public JqlQueryUnitaryOperand encodedOperand(String encodedOperand) {
		this.encodedOperand = encodedOperand;
		return this;
	}

	/**
	 * The name of the function.
	 * @return function
	 **/
	public String getFunction() {
		return function;
	}

	/**
	 * Set function
	 **/
	public void setFunction(String function) {
		this.function = function;
	}

	public JqlQueryUnitaryOperand function(String function) {
		this.function = function;
		return this;
	}

	/**
	 * The keyword that is the operand value.
	 * @return keyword
	 **/
	public KeywordEnum getKeyword() {
		return keyword;
	}

	/**
	 * Set keyword
	 **/
	public void setKeyword(KeywordEnum keyword) {
		this.keyword = keyword;
	}

	public JqlQueryUnitaryOperand keyword(KeywordEnum keyword) {
		this.keyword = keyword;
		return this;
	}


	/**
	 * Create a string representation of this pojo.
	 **/
	@Override
	public String toString() {

		String sb = "class JqlQueryUnitaryOperand {\n" +
			"    encodedValue: " + toIndentedString(encodedValue) + "\n" +
			"    value: " + toIndentedString(value) + "\n" +
			"    arguments: " + toIndentedString(arguments) + "\n" +
			"    encodedOperand: " + toIndentedString(encodedOperand) + "\n" +
			"    function: " + toIndentedString(function) + "\n" +
			"    keyword: " + toIndentedString(keyword) + "\n" +
			"}";
		return sb;
	}

	public enum KeywordEnum {

		EMPTY("empty");


		String value;

		KeywordEnum(String v) {
			value = v;
		}

		@JsonValue
		public String value() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}
	}
}
